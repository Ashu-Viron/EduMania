// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  CONSULTANT
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  password            String
  name                String
  avatar              String?
  role                UserRole            @default(USER)
  notificationSettings Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  phone               String?             // NEW: Added phone number field
  company             String?             // NEW: Added company name field

  estimates         Estimate[]
  consultations     Consultation[]
  notifications     Notification[]
  ConsultantProfile ConsultantProfile?

  @@map("users")
}

model ConsultantProfile {
  id            String         @id @default(cuid())
  bio           String?
  specialties   String[]       @default([])
  hourlyRate    Int?
  isAvailable   Boolean        @default(false)

  // FIX: Renamed for clarity to consultations, as it's a list of consultations
  consultations Consultation[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Estimate {
  id                String         @id @default(cuid())
  title             String
  description       String
  status            EstimateStatus @default(PENDING)
  amount            Int
  estimatedDuration String
  clientName        String
  clientEmail       String
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("estimates")
}

model Consultation {
  id           String             @id @default(cuid())
  title        String
  description  String
  status       ConsultationStatus @default(SCHEDULED)
  scheduledAt  DateTime
  duration     Int
  notes        String?
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultantId String
  consultant   ConsultantProfile  @relation(fields: [consultantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("consultations")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum EstimateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConsultationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}